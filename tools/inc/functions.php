<?php

// Get info about all games (name, id, etc)
function findGames($thePDO) {
    $aGames = array();
    $aResult = $thePDO->query("SELECT id,name FROM games WHERE 1");

    foreach ($aResult as $aGameInfo) {
        $aGames[$aGameInfo['id']] = $aGameInfo['name'];
    }

    return $aGames;
}

function getSubjectRawQuestionnaireData($thePDO, $theSubjectId) {
    $aData = array();

    // Get all data generated by the informed subject
    $aStmt = $thePDO->prepare("SELECT * FROM questionnaires WHERE uuid = :uuid ORDER BY timestamp ASC");
    $aStmt->bindParam(':uuid', $theSubjectId);
    $aStmt->execute();

    while($aRow = $aStmt->fetch(PDO::FETCH_ASSOC)) {
        $aData[] = $aRow;
    }

    return $aData;
}

function getSubjectRawGameData($thePDO, $theSubjectId) {
    $aData = array();

    // Get all data generated by the informed subject
    $aStmt = $thePDO->prepare("SELECT * FROM logs WHERE uuid = :uuid ORDER BY timestamp ASC");
    $aStmt->bindParam(':uuid', $theSubjectId);
    $aStmt->execute();

    while($aRow = $aStmt->fetch(PDO::FETCH_ASSOC)) {
        $aData[] = $aRow;
    }

    return $aData;
}

function collectGameStats($theSubjectRawGameData, $theGames) {
    $aStats = array('games' => array(), 'rests' => array(), 'raw' => array(), 'raw_belt' => array());

    $aTimeStarted = 0;
    $aInRest = false;
    $aInGame = false;
    $aHREntries = array();
    $aHREntriesBelt = array();
    $aActionEntries = array();

    foreach($theSubjectRawGameData as $aRow) {
        $aData = json_decode($aRow['data']);

        if($aData != null) {
            foreach($aData as $aItem) {
                $aEntry = json_decode($aItem->d);

                if(is_string($aEntry)) {
                    // This is a milestone mark (start of the game, end of rest, etc.)
                    switch($aEntry) {
                        case 'game_start':
                        case 'tutorial_start':
                            if(!$aInGame) {
                                $aInGame = true;
                                $aHREntries = array();
                                $aHREntriesBelt = array();
                                $aActionEntries = array();
                                $aTimeStarted = (int)($aItem->t / 1000.0);
                            }
                            break;

                        case 'game_end':
                            $aStats['games'][] = array(
                                'id' => $aRow['fk_game'],
                                'name'=> $theGames[$aRow['fk_game']],
                                'hr' => $aHREntries,
                                'hr_belt' => $aHREntriesBelt,
                                'actions' => $aActionEntries,
                                'start' => $aTimeStarted,
                                'end' => (int)($aItem->t / 1000.0)
                            );
                            $aInGame = false;
                            break;

                        case 'experiment_rest_start':
                            $aInRest = true;
                            $aHREntries = array();
                            $aHREntriesBelt = array();
                            $aActionEntries = array();
                            $aTimeStarted = (int)($aItem->t / 1000.0);
                            break;

                        case 'experiment_game_start':
                            if($aInRest) {
                                $aStats['rests'][] = array(
                                    'hr' => $aHREntries,
                                    'hr_belt' => $aHREntriesBelt,
                                    'start' => $aTimeStarted,
                                    'end' => (int)($aItem->t / 1000.0)
                                );
                                $aInRest = false;
                            }
                            break;
                    }
                } else {
                    // This is data collected from a game or the HR watch.
                    // Let's handle it
                    if(property_exists($aEntry, 'hr')) {
                        // We are dealing with a HR entry
                        $aItemTime = (int)($aItem->t / 1000.0);
                        $aStatsKey = '';

                        if(property_exists($aEntry, 'dev')) {
                            // Entry from the HR belt
                            $aHREntriesBelt[] = $aEntry->hr;
                            $aStatsKey = 'raw_belt';
                        } else {
                            // Entry from the HR watch
                            $aHREntries[] = $aEntry->hr;
                            $aStatsKey = 'raw';
                        }

                        // Save the entry
                        $aStats[$aStatsKey][] = array('timestamp' => $aItemTime, 'hr' => $aEntry->hr, 'label' => $aInRest ? 'rest' : 'game');
                    } else {
                        // It's a game entry (action, hit, etc)
                        if(property_exists($aEntry, 'a')) {
                            if(strpos($aEntry->a, 'mouse') === false &&
                               strpos($aEntry->a, 'key')   === false &&
                               strpos($aEntry->a, 'jump')  === false &&
                               strpos($aEntry->a, 'dash')  === false) {

                                $aActionEntries[] = array(
                                    'action' => $aEntry->a,
                                    'value' => $aEntry->a, // TODO: get action value here
                                    'timestamp' => $aItem->t
                                );
                            }
                        }
                    }
                }
            }
        } else {
            if($aRow['data'] != '[]') {
                echo "  Warning: unable to parse data ".$aRow['data']."\n";
            }
        }
    }

    return $aStats;
}

function getWhenExperimentStarted($thePDO, $theSubjectId) {
    $aStmt = $thePDO->prepare("SELECT timestamp FROM logs WHERE uuid = :uuid AND data LIKE '%experiment_hr_start%'");
	$aStmt->bindParam(':uuid', $theSubjectId);
    $aStmt->execute();

    $aRet = array();

    while($aRow = $aStmt->fetch(PDO::FETCH_ASSOC)) {
        $aRet[] = $aRow['timestamp'];
    }

    if($aRet == null) {
        throw new Exception("Experiment for uuid ".$aSubjectId." has no experiment_hr_start");
    }

    if(count($aRet) > 1) {
        throw new Exception("Experiment for uuid ".$aSubjectId." has multiple experiment_hr_start");
    }

    return (int)$aRet[0];
}

function getWhenExperimentEnded($thePDO, $theSubjectId) {
    $aStmt = $thePDO->prepare("SELECT timestamp FROM logs WHERE uuid = :uuid AND data LIKE '%experiment_end%'");
	$aStmt->bindParam(':uuid', $theSubjectId);
    $aStmt->execute();

    $aRet = array();

    while($aRow = $aStmt->fetch(PDO::FETCH_ASSOC)) {
        $aRet[] = $aRow['timestamp'];
    }

    if($aRet == null) {
        throw new Exception("Experiment for uuid ".$aSubjectId." has no experiment_end");
    }

    if(count($aRet) > 1) {
        throw new Exception("Experiment for uuid ".$aSubjectId." has multiple experiment_end");
    }

    return (int)$aRet[0];
}

function collectQuestionaireStats($theSubjectRawQuestionnaireData, $theGames) {
    $aStats = array();
    $aGameId = -1;
    $i = 0;

    foreach($theSubjectRawQuestionnaireData as $aRow) {
        $aData = json_decode($aRow['data']);
        $aGameId = $i == count($theGames) ? -1 : $aRow['fk_game'];

        if($aData != null) {
            if(is_array($aData->d)) {
                $aGameStats = array(
                    'id' => $aGameId,
                    'game' => isset($theGames[$aGameId]) ? $theGames[$aGameId] : '(Demographic)',
                    'data' => array()
                );

                foreach($aData->d as $aEntry) {
                    $aGameStats['data'][] = $aEntry;
                }

                $aStats[] = $aGameStats;
            } else {
                echo "  Warning: questionnaire entry with timestamp=".$aRow['timestamp']." seems strange. Take a look at it.\n";
            }
        } else {
            echo "  Warning: unable to parse questionnaire data ".$aRow['data']."\n";
        }

        $i++;
    }

    return $aStats;
}

function getSubjectData($thePDO, $theSubjectId) {
    $aGames = findGames($thePDO);
    $aRawGameData = getSubjectRawGameData($thePDO, $theSubjectId);
    $aRawQuestionnaireData = getSubjectRawQuestionnaireData($thePDO, $theSubjectId);

    $aStats = collectGameStats($aRawGameData, $aGames);
    $aStats['questionnaires'] = collectQuestionaireStats($aRawQuestionnaireData, $aGames);

    return $aStats;
}

function getGameLabelByTimestamp($theSubjectData, $theTimestamp) {
    $aRet = '?';

    // Check if timestamp is within a gaming session
    foreach($theSubjectData['games'] as $aNum => $aGame) {
        if($theTimestamp >= $aGame['start'] && $theTimestamp <= $aGame['end']) {
            $aRet = str_replace(' ', '_', $aGame['name']);
            break;
        } else {
            $aRet = 'other';
        }
    }

    // Check timestamp within resting periods
    foreach($theSubjectData['rests'] as $aNum => $aRest) {
        if($theTimestamp >= $aRest['start'] && $theTimestamp <= $aRest['end']) {
            $aRet = 'Rest_' . ($aNum + 1);
            break;
        }
    }

    return $aRet;
}

// Calculates all sorts of means from the provided subject data,
function crunchNumbers($theSubjectData, $theGroupingAmount = 15) {
    foreach($theSubjectData['games'] as $aKey => $aGame) {
        echo 'Analyzing game ' . $aGame['name'] . "\n";
        $aMeans = calculateMeans(sanitizeHRValues($aGame['hr']), $theGroupingAmount);

        $theSubjectData['games'][$aKey]['hr-means'] = $aMeans['means'];
        $theSubjectData['games'][$aKey]['hr-mean'] = $aMeans['mean'];
    }

    foreach($theSubjectData['rests'] as $aKey => $aRest) {
        echo 'Analyzing rest #' . $aKey . "\n";
        $aMeans = calculateMeans(sanitizeHRValues($aRest['hr']), $theGroupingAmount);

        $theSubjectData['rests'][$aKey]['hr-means'] = $aMeans['means'];
        $theSubjectData['rests'][$aKey]['hr-mean'] = $aMeans['mean'];
    }

    $theSubjectData['baseline'] = calculateBaseline($theSubjectData);
    $theSubjectData = calculateVariationsFromBaseline($theSubjectData, $theSubjectData['baseline']);

    return $theSubjectData;
}

function writeSubjectSummary($theFilePath, $theData, $theSubjectId, $theExperimentStarted, $theExperimentEnded, $theGroundFiles, $theQuestionnaireFiles) {
    $aInfo = array(
        'subject' => $theSubjectId,
        'video' => array(
            'file'              => $theSubjectId . '.MTS',
            'width'             => 1920,
            'height'            => 1080,
            'framerate'         => 50,
            'ffmpeg_meta_video' => 'h264 (High) (HDPR / 0x52504448), yuv420p, 1920x1080 [SAR 1:1 DAR 16:9], 50 fps, 50 tbr, 90k tbn, 100 tbc',
            'ffmpeg_meta_audio' => 'ac3 (AC-3 / 0x332D4341), 48000 Hz, stereo, fltp, 256 kb/s'
        ),
        'experiment' => array(
            'duration_seconds' => $theExperimentEnded - $theExperimentStarted,
            'start_timestamp'  => $theExperimentStarted,
            'end_timestamp'    => $theExperimentEnded,
        ),
        'ground_data' => array(),
        'questionnaire_data' => array(),
        'games' => array()
    );

    foreach($theGroundFiles as $aType => $aFile) {
        if($aFile['exists']) {
            $aInfo['ground_data'][$aType] = basename($aFile['path']);
        }
    }

    foreach($theQuestionnaireFiles as $aType => $aPath) {
        $aInfo['questionnaire_data'][$aType] = basename($aPath);
    }

    foreach($theData['games'] as $aNum => $aGame) {
        $aInfo['games'][] = array(
            'order'                    => $aNum + 1,
            'name'                     => $aGame['name'],
            'duration_seconds'         => $aGame['end'] - $aGame['start'],
            'video_start_time_seconds' => $aGame['start'] - $theExperimentStarted,
            'video_end_time_seconds'   => $aGame['end'] - $theExperimentStarted,
            'start_timestamp'          => $aGame['start'],
            'end_timestamp'            => $aGame['end']
        );
    }

    $aJson = json_encode($aInfo, JSON_PRETTY_PRINT | JSON_NUMERIC_CHECK);
    file_put_contents($theFilePath, $aJson);
}

function compareEntryTimestamp($theA, $theB) {
    if ($theA['timestamp'] == $theB['timestamp']) {
        return 0;
    }
    return ($theA['timestamp'] < $theB['timestamp']) ? -1 : 1;
}

function printExportSubjectDataSummary($theExperimentStarted, $theExperimentEnded, $theData) {
    echo "\n" . 'Summary' . "\n";
    echo '-------------------------------' . "\n";

    echo 'HR measurements' . "\n";
    echo '  Start: 0 (timestamp: ' . $theExperimentStarted . ')' . "\n";
    echo '  End: '.($theExperimentEnded - $theExperimentStarted).' (timestamp: ' . $theExperimentEnded . ')' . "\n";

    foreach($theData['games'] as $aNum => $aGame) {
        echo 'Game #' . ($aNum + 1) . ' - ' . $aGame['name'] . "\n";
        echo '  Start: ' . ($aGame['start'] - $theExperimentStarted) . ' (timestamp: ' . $aGame['start'] . ')' . "\n";
        echo '  End: ' . ($aGame['end'] - $theExperimentStarted) . ' (timestamp: ' . $aGame['end'] . ')' . "\n";
    }
}

function exportGroundFiles($theOutputPath, $theData, $theSubjectId, $theExperimentStarted, $theExperimentEnded) {
    $aGroundFiles = array(
        'watch'     => array('exists' => false, 'path' => $theOutputPath . '-HR-watch.csv'),
        'belt'      => array('exists' => false, 'path' => $theOutputPath . '-HR-belt.csv'),
        'watch_sim' => array('exists' => false, 'path' => $theOutputPath . '.ground')
    );

    $aGroundFiles['watch']['exists']      = writeGroundFile($aGroundFiles['watch']['path'], $theData, $theSubjectId, $theExperimentStarted, $theExperimentEnded, 'watch', 'raw');
    $aGroundFiles['belt']['exists']       = writeGroundFile($aGroundFiles['belt']['path'], $theData, $theSubjectId, $theExperimentStarted, $theExperimentEnded, 'belt', 'raw_belt');
    $aGroundFiles['watch_sim']['exists']  = writeGroundFile($aGroundFiles['watch_sim']['path'], $theData, $theSubjectId, $theExperimentStarted, $theExperimentEnded, 'watch', 'raw', 'SIM');

    return $aGroundFiles;
}

function writeCSVFile($thePath, $theHeader, $theEntries, $theSeparator = ',') {
    $aFile = fopen($thePath, 'w');
    fwrite($aFile, implode($theSeparator, $theHeader) . "\n");

    foreach($theEntries as $aEntry) {
        for($i = 0; $i < count($aEntry) - 1; $i++) {
            fwrite($aFile, $aEntry[$i] . $theSeparator);
        }
        fwrite($aFile, $aEntry[$i] . "\n");
    }

    fclose($aFile);
}

function escapeValueForCSV($theValue, $theForceAsString = false) {
    if(is_numeric($theValue) && !$theForceAsString) {
        return $theValue;
    } else {
        return '"' . trim(strip_tags($theValue)) . '"';
    }
}

function writeQuestionnaireFile($theOutputPath, $theSubjectId, array $theQuestionnaireData, array $theGameIds) {
    $aData = array();

    foreach($theQuestionnaireData as $aQuestionnaire) {
        if(!in_array($aQuestionnaire['id'], $theGameIds)) {
            continue;
        }

        $aNum = 1;

        foreach($aQuestionnaire['data'] as $aEntry) {
            $aData[] = array(
                $theSubjectId,
                $aQuestionnaire['game'],
                $aNum++,
                escapeValueForCSV($aEntry->q),
                escapeValueForCSV($aEntry->a),
                escapeValueForCSV($aEntry->al, true)
            );
        }
    }

    $aHeader = array('subject', 'game', 'question_number', 'question_text', 'answer_value', 'answer_label');
    writeCSVFile($theOutputPath, $aHeader, $aData);

    return $theOutputPath;
}

function exportQuestionnaireFiles($theOutputPath, $theData, $theSubjectId) {
    global $gCalibrationGames;
    global $gCotsGames;

    $aQuestionnaireData = $theData['questionnaires'];
    $aBasePath = $theOutputPath . '-questionnaire-';

    $aQuestionnaireFiles = array(
        'calibration' => writeQuestionnaireFile($aBasePath . 'calibration.csv', $theSubjectId, $aQuestionnaireData, $gCalibrationGames),
        'cots'        => writeQuestionnaireFile($aBasePath . 'cots.csv',        $theSubjectId, $aQuestionnaireData, $gCotsGames),
        'demographic' => writeQuestionnaireFile($aBasePath . 'demographic.csv', $theSubjectId, $aQuestionnaireData, array(-1))
    );

    return $aQuestionnaireFiles;
}

function exportSubjectData($theOutputPath, $theDb, $theData, $theSubjectId) {
    $aExperimentStarted = getWhenExperimentStarted($theDb, $theSubjectId);
    $aExperimentEnded = getWhenExperimentEnded($theDb, $theSubjectId);

    printExportSubjectDataSummary($aExperimentStarted, $aExperimentEnded, $theData);

    $aGroundFiles = exportGroundFiles($theOutputPath, $theData, $theSubjectId, $aExperimentStarted, $aExperimentEnded);
    $aQuestionnaireFiles = exportQuestionnaireFiles($theOutputPath, $theData, $theSubjectId);

    $aPathSummaryFile = $theOutputPath . '.json';
    writeSubjectSummary($aPathSummaryFile, $theData, $theSubjectId, $aExperimentStarted, $aExperimentEnded, $aGroundFiles, $aQuestionnaireFiles);

    echo "\nData successfully exported:\n";

    foreach($aGroundFiles as $aType => $aInfo) {
        if($aInfo['exists']) {
            echo "  " . $aInfo['path'] . "\n";
        }
    }
    foreach($aQuestionnaireFiles as $aType => $aPath) {
        echo "  " . $aPath . "\n";
    }

    echo "  " . $aPathSummaryFile . "\n";
}

/**
 * Write the data of a subject into a ground data file. There are two types of ground data files: CSV and SIM.
 * In the CSV file, there is a header and one column tells the sensor used to collect the data, i.e. watch.
 * In the SIM file, there is no header, space is used as separator and no information about the sensor is provided.
 *
 * @param  [type] $theFilePath          [description]
 * @param  [type] $theData              [description]
 * @param  [type] $theSubject           [description]
 * @param  [type] $theExperimentStarted [description]
 * @param  [type] $theExperimentEnded   [description]
 * @param  string $theSensor            [description]
 * @param  string $theRawSource         [description]
 * @param  string $theFileType          [description]
 * @return bool
 */
function writeGroundFile($theFilePath, $theData, $theSubject, $theExperimentStarted, $theExperimentEnded, $theSensor = 'watch', $theRawSource = 'raw', $theFileType = 'csv') {
    $aEntries = array();
    $aFileType = strtolower($theFileType);
    $aSeparator = $aFileType == 'csv' ? ',' : ' ';

    // Get all entries and sort them according to the timestamp
    $aRawEntries = $theData[$theRawSource];
    usort($aRawEntries, 'compareEntryTimestamp');

    foreach($aRawEntries as $aLine) {
        $aTime = $aLine['timestamp'] - $theExperimentStarted;
        $aLabel = getGameLabelByTimestamp($theData, $aLine['timestamp']);

        // Ignore entries after the final questionnaire has been answered,
        // since that moment marks the end of the experiment. Also ignore
        // entries with a negative time, since they were generated before
        // the start the of the experiment.
        if($aLine['timestamp'] >= $theExperimentEnded || $aTime < 0) {
            echo ' Warning: HR entry ignored because it was not part of experiment period (sensor: '.$theSensor.', time: '.$aTime.', timestamp: '.$aLine['timestamp'].', label: '.$aLabel.')' . "\n";
            continue;
        }

        $aEntries[] = array(
            'timestamp' => $aLine['timestamp'],
            'time' => $aTime,
            'hr' => $aLine['hr'],
            'label' => $aLabel
        );
    }

    if(count($aEntries) == 0) {
        return false;
    }

    $aFile = fopen($theFilePath, 'w');

    if($aFileType == 'csv') {
        fwrite($aFile, 'subject,timestamp,time,hr,sensor,label' . "\n");
    }

    foreach($aEntries as $aEntry) {
        fwrite($aFile, $theSubject . $aSeparator);
        fwrite($aFile, $aEntry['timestamp'] . $aSeparator);
        fwrite($aFile, $aEntry['time'] . $aSeparator);
        fwrite($aFile, $aEntry['hr'] . $aSeparator);

        if($aFileType == 'csv') {
            fwrite($aFile, $theSensor . $aSeparator);
        }

        fwrite($aFile, $aEntry['label'] . "\n");
    }

    fclose($aFile);
    return true;
}

function findSubjectVideoFiles($thePathSubjectRawDataFolder) {
    $aVideoFiles = array();
    $aFiles = scandir($thePathSubjectRawDataFolder);

    foreach($aFiles as $aFile) {
        $aInfo = pathinfo($aFile);

        if($aInfo['extension'] == 'MTS') {
            $aVideoFiles[] = $thePathSubjectRawDataFolder . $aFile;
        }
    }

    return $aVideoFiles;
}

function runAndExitIfFailed($theCmd, $theLogPath) {
    $aOutput = array();
    $aReturn = -1;
    exec($theCmd . ' 2>&1', $aOutput, $aReturn);

    if($aReturn != 0) {
        echo 'Command failed (returned '.$aReturn.'): ' . $theCmd . "\n";
        exit(5);
    }

    file_put_contents($theLogPath, implode("\n", $aOutput));
}

function loadSubjectGroundDataSummary($thePathToJson) {
    $aContent = @file_get_contents($thePathToJson);

    if($aContent === false) {
        return null;
    }

    $aData = json_decode($aContent, true);
    return $aData;
}

function assertRunningAsCmdScript($theExitError = 10) {
    if (php_sapi_name() != 'cli') {
        echo 'This script should be run from the command line.';
        exit($theExitError);
    }
}

function findDirectories($thePathParentDir) {
    $aDirs = glob($thePathParentDir . '*', GLOB_ONLYDIR);
    return $aDirs;
}

function getSyncStartFromFile($theSubjectFolderPath, $theFileName = 'sync_start.txt') {
    $aPath = $theSubjectFolderPath . DIRECTORY_SEPARATOR . $theFileName;

    if(!file_exists($aPath)) {
        return false;
    }

    $aSyncStart = file_get_contents($aPath);
    $aSyncStart = trim($aSyncStart);

    return $aSyncStart;
}

function stringCommasToArray($theStringWithCommas) {
    if(empty($theStringWithCommas) || !is_string($theStringWithCommas)) {
        return array();
    }

    $aParts = explode(',', $theStringWithCommas);
    return $aParts;
}

?>
